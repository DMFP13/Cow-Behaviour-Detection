# Install required libraries
!pip install ultralytics
!pip install gdown
import os
import cv2
from ultralytics import YOLO
import gdown
from matplotlib import pyplot as plt
from PIL import Image

# Directory to save images
output_dir = "images"
if not os.path.exists(output_dir):
    os.makedirs(output_dir)

# List of Google Drive file URLs
file_links = [
    "https://drive.google.com/file/d/1MnatlXhx8WtpKN0LIghQvUha6vESUi1i/view?usp=drive_link",
    "https://drive.google.com/file/d/1EpJUme4fuVPTaYB_pOhEU9680ltJytIf/view?usp=drive_link",
    "https://drive.google.com/file/d/1FKDbKD1U1n7ZLea-tV84kaIKibSYJnYa/view?usp=drive_link",
    "https://drive.google.com/file/d/16ZCejNWUEXwYitbxZIl5rhYC65rIDI79/view?usp=drive_link",
    "https://drive.google.com/file/d/1eZ71iqNmmik3OhlN-82Rwau_wt2DwA_g/view?usp=drive_link",
    "https://drive.google.com/file/d/1EWTdPYKJv2YMR-g6HVMOmOvLc6T8NRGR/view?usp=drive_link",
    "https://drive.google.com/file/d/1hjtg6fZh_33lSChBwuY-GjSFNoz2KFpA/view?usp=drive_link",
    "https://drive.google.com/file/d/18ZL6ZmPY2s1Ev3gYT4D-d9KSV8NHS6Ql/view?usp=drive_link",
    "https://drive.google.com/file/d/1A7XtTg6CV2qFUt1-puPl_Ik-arjcq6Fq/view?usp=drive_link",
    "https://drive.google.com/file/d/156QwQZqYmz-oXeyy8PYvJ-ubf9VBsYRN/view?usp=drive_link",
    "https://drive.google.com/file/d/1igYp8qC6fWQRdZHqCsXCrzXVLcppLRjT/view?usp=drive_link",
    "https://drive.google.com/file/d/1y48bM4vazgDqdtinNXffj9j0ipM86jDG/view?usp=drive_link",
    "https://drive.google.com/file/d/19MuC9K7oYBDELjBnEWzIHWJ46Ey3_9kJ/view?usp=drive_link",
    "https://drive.google.com/file/d/1v-PEEKJGm-cy0kKm7EZWeMg_LHVC68fZ/view?usp=drive_link",
    "https://drive.google.com/file/d/11xQ9TaZ5D7RWa7VMgtwLBUR5JaMBsVV0/view?usp=drive_link",
    "https://drive.google.com/file/d/1q9BxHwgr1-aBeBV9nt_Boij-LDbo2Qkp/view?usp=drive_link",
    "https://drive.google.com/file/d/1EC7_7CR4AvcRnKQA43sVWrf7uA51KwwG/view?usp=drive_link",
]

# Function to download images using gdown
def download_images(file_links, output_dir):
    for idx, url in enumerate(file_links):
        # Generate filename
        output_path = os.path.join(output_dir, f"image_{idx+1}.jpg")
        print(f"Downloading {url}...")
        # Download file using gdown
        gdown.download(url, output_path, fuzzy=True, quiet=False)
        # Validate image
        try:
            img = Image.open(output_path)
            img.verify()  # Check if it's a valid image
            print(f"Image {output_path} is valid.")
        except Exception as e:
            print(f"Error with {output_path}: {e}")
            os.remove(output_path)  # Remove invalid files

# Call the function to download images
download_images(file_links, output_dir)

# Download the model file first
!wget https://github.com/DMFP13/Cow-Behaviour-Detection/raw/main/cow_behavior_detection/runs/detect/train/weights/best.pt

# Load YOLO model using the downloaded file
model = YOLO("best.pt")  # Load the downloaded model file

# Run YOLO inference on downloaded images
results = model.predict(
    source=output_dir,  # Directory containing images
    save=True,          # Save prediction visualizations
    save_txt=True       # Save predictions as text files
)

print("Inference completed. Results saved.")

# Directory where YOLO saves predicted images
predicted_dir = os.path.join("runs", "detect", "predict")

# Function to visualize images with bounding boxes
def visualize_predictions(predicted_dir):
    predicted_images = [f for f in os.listdir(predicted_dir) if f.endswith(".jpg")]
    for img_file in predicted_images:
        img_path = os.path.join(predicted_dir, img_file)
        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB for correct display
        
        plt.figure(figsize=(10, 10))
        plt.imshow(img)
        plt.axis("off")
        plt.title(f"Predictions for {img_file}")
        plt.show()

# Visualize the predicted images
visualize_predictions(predicted_dir)
